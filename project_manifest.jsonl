{"path": "tools/make_manifest.py", "sha256": "12632cd4806e2f9f4b9c21a6289bfd371cb2f23bf3c519e795a5a7421688faf2", "size": 1380, "snippet_head": "# tools/make_manifest.py\nimport json, hashlib, ast\nfrom pathlib import Path\nROOT = Path(\".\")\nOUT = Path(\"project_manifest.jsonl\")\nEXTS = {\".py\",\".ts\",\".js\",\".tsx\",\".jsx\",\".md\",\".txt\"}\n\ndef sha256(p):\n    h = hashlib.sha256()\n    h.update(p.read_bytes())\n    return h.hexdigest()\n\ndef extract_py_imports(text):\n    try:\n        tree = ast.parse(text)\n        imps = set()\n        for n in ast.walk(tree):\n            if isinstance(n, ast.Import):\n                for nm in n.names: imps.add(nm.name)\n            elif isinstance(n, ast.ImportFrom):\n                mod = n.module or \"\"\n                for nm in n.names: imps.add((mod + \".\" + nm.name) if mod else nm.name)\n        return list(imps)\n    except Exception:\n        return []\n\nwith OUT.open(\"w\", encoding=\"utf-8\") as out:\n    for p in ROOT.rglob(\"*\"):\n        if not p.is_file(): continue\n        if any(part in (\".git\",\"venv\",\"node_modules\",\"__pycache__\") for part in p.parts): continue\n        if p.suffix not in EXTS: continue\n        try:\n            txt = p.read_text(encoding=\"utf-8\", errors=\"ignore\")\n        except Exception:\n            continue\n        item = {\"path\": str(p), \"sha256\": sha256(p), \"size\": len(txt), \"snippet_head\": txt[:2000], \"ext\": p.suffix}\n        if p.suffix == \".py\":\n            item[\"imports\"] = extract_py_imports(txt)\n        out.write(json.dumps(item) + \"\\n\")\nprint(\"Wrote\", OUT)\n\n", "ext": ".py", "imports": ["pathlib.Path", "hashlib", "ast", "json"]}
{"path": "tools/normalize_imports.py", "sha256": "c711beaf2102205dac6c000a1ab15be68164283ce3bd0d7c116d39bf4b9a85de", "size": 1856, "snippet_head": "# tools/normalize_imports.py\nimport os, re, difflib, argparse\nfrom pathlib import Path\n\nROOT = Path(\".\").resolve()\nPATCH_DIR = ROOT / \"patches\"\nPATCH_DIR.mkdir(exist_ok=True)\n\np = argparse.ArgumentParser()\np.add_argument(\"--canonical\", default=os.getenv(\"CANONICAL_ROOT\", \"src\"))\np.add_argument(\"--alt\", default=os.getenv(\"ALT_ROOT\", \"legacy\"))\np.add_argument(\"--exts\", default=\".py,.ts,.js,.tsx,.jsx\", help=\"comma sep\")\nargs = p.parse_args()\n\nCANONICAL = args.canonical.rstrip(\"/\")\nALT = args.alt.rstrip(\"/\")\nEXTS = set(e.strip() for e in args.exts.split(\",\"))\n\npy_re = re.compile(r'(^\\s*(?:from|import)\\s+)(%s(?:[.\\w/]*))' % re.escape(ALT), re.M)\nts_re = re.compile(r'(from\\s+[\\'\"])(%s(?:[\\/\\w\\-.]*))([\\'\"])' % re.escape(ALT))\n\ndef scan():\n    for path in ROOT.rglob(\"*\"):\n        if not path.is_file(): continue\n        if any(part in (\".git\",\"venv\",\"node_modules\",\"__pycache__\") for part in path.parts): continue\n        if path.suffix not in EXTS: continue\n        text = path.read_text(encoding=\"utf-8\", errors=\"ignore\")\n        new = text\n        if path.suffix == \".py\":\n            if py_re.search(text):\n                new = py_re.sub(lambda m: m.group(1) + m.group(2).replace(ALT, CANONICAL), text)\n        else:\n            if ts_re.search(text):\n                new = ts_re.sub(lambda m: m.group(1) + m.group(2).replace(ALT, CANONICAL) + m.group(3), text)\n        if new != text:\n            write_patch(path, text, new)\n\ndef write_patch(path, old, new):\n    old_lines = old.splitlines(keepends=True)\n    new_lines = new.splitlines(keepends=True)\n    diff = ''.join(difflib.unified_diff(old_lines, new_lines, fromfile=str(path), tofile=str(path), lineterm=''))\n    out = PATCH_DIR / (str(path).replace(os.sep, \"__\") + \".patch\")\n    out.write_text(diff, encoding=\"utf-8\")\n    print(\"WROTE PATCH:\", out)\n\nif __name__ == \"__main__\":\n    scan()\n\n", "ext": ".py", "imports": ["argparse", "os", "pathlib.Path", "re", "difflib"]}
{"path": "src/README.md", "sha256": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", "size": 0, "snippet_head": "", "ext": ".md"}
