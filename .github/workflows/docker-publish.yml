name: Docker Publish (GHCR)

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Derive image tags
        id: meta
        run: |
          OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          SHA=${{ github.sha }}
          echo "core=ghcr.io/${OWNER}/core-service:${SHA}" >> $GITHUB_OUTPUT
          echo "core_latest=ghcr.io/${OWNER}/core-service:latest" >> $GITHUB_OUTPUT
          echo "oracle=ghcr.io/${OWNER}/oracle-service:${SHA}" >> $GITHUB_OUTPUT
          echo "oracle_latest=ghcr.io/${OWNER}/oracle-service:latest" >> $GITHUB_OUTPUT

      - name: Build & Push core-service
        uses: docker/build-push-action@v6
        with:
          context: .
          file: apps/core-service/Dockerfile
          push: true
          tags: |
            ${{ steps.meta.outputs.core }}
            ${{ steps.meta.outputs.core_latest }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & Push oracle-service
        uses: docker/build-push-action@v6
        with:
          context: .
          file: apps/oracle-service/Dockerfile
          push: true
          tags: |
            ${{ steps.meta.outputs.oracle }}
            ${{ steps.meta.outputs.oracle_latest }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: (Optional) Install Doppler CLI
        if: ${{ secrets.DOPPLER_TOKEN != '' }}
        uses: dopplerhq/cli-action@v2

      - name: (Optional) Verify Doppler connectivity
        if: ${{ secrets.DOPPLER_TOKEN != '' }}
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        run: |
          doppler --version
          doppler secrets download --no-file --format env --project ${{ vars.DOPPLER_PROJECT || 'studyapp' }} --config ${{ vars.DOPPLER_CONFIG || 'prod' }} >/dev/null
