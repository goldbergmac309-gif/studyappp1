generator client {
  provider = "prisma-client-js"
  // output disabled to use Prisma's default location compatible with pnpm
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  subjects  Subject[]
  blueprints Blueprint[] @relation("UserBlueprints")
}

model Subject {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Metadata (Epoch II)
  courseCode    String?
  professorName String?
  ambition      String?
  color         String?
  starred       Boolean  @default(false)
  archivedAt    DateTime?

  // Relation to User (owner)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Back-relation
  documents  Document[]

  // Workspace extensions (Epoch III)
  blueprintId  String?
  activeLayout Blueprint?     @relation("SubjectActiveLayout", fields: [blueprintId], references: [id])
  widgets      WidgetInstance[]
  // Board configuration (backgrounds, grid density etc.)
  boardConfig  Json?
}

// Document processing status enum
enum Status {
  UPLOADED
  QUEUED
  PROCESSING
  COMPLETED
  FAILED
}

model Document {
  id        String   @id
  filename  String
  s3Key     String
  status    Status   @default(UPLOADED)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  subjectId String
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  analysisResult AnalysisResult?
}

model AnalysisResult {
  id            String   @id @default(cuid())
  engineVersion String
  resultPayload Json
  createdAt     DateTime @default(now())

  // Relations
  documentId String @unique
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

// --- Workspace Models ---

// Pre-defined templates for a subject's canvas
model Persona {
  id      String @id @default(cuid())
  name    String @unique // e.g., "STEM Lab", "Humanities Hub"
  widgets Json   // Default set of widgets and their initial configuration
}

// A user's saved layout configuration
model Blueprint {
  id     String @id @default(cuid())
  userId String
  user   User   @relation("UserBlueprints", fields: [userId], references: [id], onDelete: Cascade)
  name   String   // e.g., "My Weekly Planner Layout"
  layout Json     // The saved positions and sizes of widgets

  @@unique([userId, name])
  // Back-relation to Subjects that reference this Blueprint as active layout
  subjects Subject[] @relation("SubjectActiveLayout")
}

// An instance of a widget on a specific subject's canvas
model WidgetInstance {
  id        String     @id @default(cuid())
  subjectId String
  subject   Subject    @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  type      WidgetType // The type of widget (e.g., NOTES, MIND_MAP)
  position  Json       // { x, y } coordinates
  size      Json       // { width, height } dimensions
  content   Json       // The specific data for this widget instance
  style     Json?      // Presentation style: accent, bg, elevation, radius

  @@index([subjectId])
}

enum WidgetType {
  NOTES
  MIND_MAP
  FLASHCARDS
  STICKY_NOTE
  TASKS
  COUNTDOWN
  POMODORO
  CALENDAR_MONTH
  MUSIC_PLAYER
  LINK_TILE
  PROGRESS
}
